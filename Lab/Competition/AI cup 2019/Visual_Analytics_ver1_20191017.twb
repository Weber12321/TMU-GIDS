<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20193.19.0821.2225                               -->
<workbook source-build='2019.3.0 (20193.19.0821.2225)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <SheetIdentifierTracking ignorable='true' predowngraded='true' />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <style-theme name='clean' />
  <datasources>
    <datasource caption='task2_trainset.csv+ (Multiple Connections)' inline='true' name='federated.0gpawjk0yfgwq81e3pycg13ecgke' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='task2_public_testset' name='textscan.18obem00x6u17n16eqyn80uj4fa0'>
            <connection class='textscan' directory='C:/Users/doudi/OneDrive/Documents/TMU-GIDS/Lab/Competition/AI cup 2019' filename='task2_public_testset.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation all='true' name='task2_trainset.csv+' type='union'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='string' name='Id' />
            <column datatype='string' name='Title' />
            <column datatype='string' name='Abstract' />
            <column datatype='string' name='Authors' />
            <column datatype='string' name='Categories' />
            <column datatype='date' name='Created Date' />
            <column datatype='string' name='Task 2' />
            <column datatype='string' name='Table Name' />
          </columns>
          <relation connection='textscan.18obem00x6u17n16eqyn80uj4fa0' name='task2_trainset.csv' table='[task2_trainset#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='Id' ordinal='0' />
              <column datatype='string' name='Title' ordinal='1' />
              <column datatype='string' name='Abstract' ordinal='2' />
              <column datatype='string' name='Authors' ordinal='3' />
              <column datatype='string' name='Categories' ordinal='4' />
              <column datatype='date' name='Created Date' ordinal='5' />
              <column datatype='string' name='Task 2' ordinal='6' />
            </columns>
          </relation>
          <relation connection='textscan.18obem00x6u17n16eqyn80uj4fa0' name='task2_public_testset.csv' table='[task2_public_testset#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='Id' ordinal='0' />
              <column datatype='string' name='Title' ordinal='1' />
              <column datatype='string' name='Abstract' ordinal='2' />
              <column datatype='string' name='Authors' ordinal='3' />
              <column datatype='string' name='Categories' ordinal='4' />
              <column datatype='date' name='Created Date' ordinal='5' />
            </columns>
          </relation>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[task2_trainset.csv+]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Id</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Id]</local-name>
            <parent-name>[task2_trainset.csv+]</parent-name>
            <remote-alias>Id</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Title</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Title]</local-name>
            <parent-name>[task2_trainset.csv+]</parent-name>
            <remote-alias>Title</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Abstract</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Abstract]</local-name>
            <parent-name>[task2_trainset.csv+]</parent-name>
            <remote-alias>Abstract</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Authors</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Authors]</local-name>
            <parent-name>[task2_trainset.csv+]</parent-name>
            <remote-alias>Authors</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Categories</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Categories]</local-name>
            <parent-name>[task2_trainset.csv+]</parent-name>
            <remote-alias>Categories</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Created Date</remote-name>
            <remote-type>133</remote-type>
            <local-name>[Created Date]</local-name>
            <parent-name>[task2_trainset.csv+]</parent-name>
            <remote-alias>Created Date</remote-alias>
            <ordinal>5</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Task 2</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Task 2]</local-name>
            <parent-name>[task2_trainset.csv+]</parent-name>
            <remote-alias>Task 2</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Table Name</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Table Name]</local-name>
            <parent-name>[task2_trainset.csv+]</parent-name>
            <remote-alias>Table Name</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[Authors]' role='dimension' type='nominal' />
      <column datatype='string' name='[Categories]' role='dimension' type='nominal' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' name='[Task 2]' role='dimension' type='nominal' />
      <column-instance column='[Authors]' derivation='None' name='[none:Authors:nk]' pivot='key' type='nominal' />
      <column-instance column='[Categories]' derivation='None' name='[none:Categories:nk]' pivot='key' type='nominal' />
      <column-instance column='[Task 2]' derivation='None' name='[none:Task 2:nk]' pivot='key' type='nominal' />
      <layout dim-ordering='alphabetic' dim-percentage='0.588729' measure-ordering='alphabetic' measure-percentage='0.411271' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Authors:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Al-Kadi&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Boutilier&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Darmont&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Geiger&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Hosseini&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kent&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Leydesdorff&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Merhav&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Prasad&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Schubert&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Tucci&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Xu&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Aaronson&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bassil&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Choi&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Eppstein&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Gyongyosi&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Johnson&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Kumabe/Mihara&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Malaschonok&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;P&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Saha/Afshang/Dhillon&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Srivastava&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Wang/Wu&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Zhang&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Abramo/Cicero/D&apos;Angelo&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bergstra/Middelburg&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Cosovic/Vukobratovic&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ferrara&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Han&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Kak&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Lauer&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Marwala&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Pivovarov/Trunov&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Schenck/Fox&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Tanti/Gatt/Camilleri&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Winter&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Zhu&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Audebert/Saux/Lefèvre&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Brown&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Davis&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Gillis/Glineur&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Hutter&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kim&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Li/Wang&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Mitra&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Rasouli/Tsotsos&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sharma&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Valin&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Yamato&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Al-Maqri/Othman/Ali/Hanapi&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Brændeland&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Das&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Georgiev&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Hsu&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Khalil/Abdel-Aziz/Nazmy/Salem&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Li&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Meyer&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Pucella&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sen&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Tucker&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Xu/Liu/Shu/Yu&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Abramo/D&apos;Angelo&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bhattacharya/Sinha&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Croll&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Gagie&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Hayashi&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Kaluzhsky&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Lee&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Masood&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Pla/Jaldén&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Schlei&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Tavassoli&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Wirth&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Zhu/Newsam&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Banitalebi-Dehkordi/Pourazad/Nasiopoulos&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Chen&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Dokuchaev&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Gunther&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Jassim&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Krizhanovsky&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Luzzi/Vehkalahti&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Ortega&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Saad&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Song&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Wang/Baillieul&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Zein/Wenger/Chablat&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Abbas&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bátfai&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Clarke&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Evako&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Hafemann/Sabourin/Oliveira&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Johnson/Zhang&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Kumar&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mani&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Patrascu&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Santos&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Steeg/Galstyan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Watanabe&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Zhang/Liu&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Banerji&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Chakraborty&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Dessalles&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Greer&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Jafarizadeh&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Krijthe/Loog&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Liu/Wang&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Nguyen&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Rong&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Smirnov&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Vovk&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Yu/Slotine&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Abramsky&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Blass/Gurevich&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cruz-Filipe/Montesi&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Gao&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Hernandez-Orallo&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kamada/Ichimura&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Lemire&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Medhat/Chesmore/Robinson&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Portugal/Alencar/Cowan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Schmidt&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Terletskyi/Provotar&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Wong&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Azzeh&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bull&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;de Kerret/Gesbert&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Gómez-Torrecillas/Lobillo/Navarro&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Inoue&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kim/Kim&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Liberatore&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Mittal&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Ray&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Sherlock/Muniswamaiah/Clarke/Cicoria&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Van/Le&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Yan/Gregory&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Bach&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Burger&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;de Lamare/Sampaio-Neto&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Goodman&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Iqbal&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Kim/Lee&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Liu&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Molnar&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Rezaei/Yang/Meinel&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Singh&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Verhodubs&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Yang&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bania&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Chauhan/Sharma/Dahiya&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Do-Duy/Castro&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Grigoriev&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Jain&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Krivulin&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Lu&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;O&apos;Rourke&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;S/Bhattacharyya&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Smith&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Wang&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Yuan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Barbosa&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Chen/Wang&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Douik/Dahrouj/Al-Naffouri/Alouini&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Gupta&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Jiang&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Kugiumtzis&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ma&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ortega/Braun&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Saha&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Sparavigna&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Wang/Li/Tian/Liu&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Zeng&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Argentini&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Briat&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Daumé&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Gershenson&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Hu&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Khan Muhammad&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Li/Chen&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Migunov&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Qiu/Li&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Shah&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Turney&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Xu/Zhang&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Aktas/Yilmaz/Aktas&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Boeing&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Dambreville&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Garcia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Hindy/Nosratinia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kar/Varshney&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Levin&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Meghanathan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Poss&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Schreiber&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Trimpe&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Wu&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;AbdelGawad&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Benninghoff/Garcke&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Cohen&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Ewaisha/Tepedelenlioglu&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Halpern&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Jones&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Kunchukuttan/Bhattacharyya&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Margenstern&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Pedersen&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Sapir&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Stefanov&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Wen&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Zhang/Wang&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Ballard/Demmel/Holtz/Lipshitz/Schwartz&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cai&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;de Oliveira&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Gopych&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Jacob/Murugan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Klein/Nelson&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Liu/Ihler&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Nawratil/Schicho&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Robinson&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Singh/Chana&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Vitanyi&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Yu&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Arslan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bródka/Saganowski/Kazienko&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Daumé/Marcu&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Ghosh&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Hunter&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Khor&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Li/Li&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Mishra&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Ralph&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Shahin&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Urteaga/Wiggins&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Yamada&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Abraham&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bergstra&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Colcombet/Petrişan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Feldmann&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Halpern/Pucella&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Joudeh/Clerckx&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Kwasniewski&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Martin&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Petersen&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Sayama&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Sudhakaran/Lanz&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Williams&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Zhou&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Categories:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;cs.CV/cs.AI&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;cs.CV/cs.LG&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;cs.DC&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;cs.CL/cs.AI&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;cs.CV&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;cs.OH&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;cs.AI&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;cs.CL/cs.LG&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;cs.IR&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;cs.DM&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;cs.LO&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;cs.SD&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;cs.LG/cs.AI/stat.ML&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;math.CO/cs.DM&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;stat.ML/cs.LG&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;cs.LG/stat.ML&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;cs.NE&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;cs.NI/cs.IT/math.IT&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;cs.CG&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;cs.HC&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;cs.GR&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;cs.IT/math.IT&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;cs.PL&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;cs.DS&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;cs.SY/math.OC&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;cs.CR&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;cs.DL&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;cs.ET&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;cs.AI/cs.LG&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;cs.CY&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;cs.MM&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;cs.IT/cs.NI/math.IT&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;cs.LG&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;cmp-lg/cs.CL&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;eess.SP&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;cs.CC&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;cs.SI/physics.soc-ph&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;cs.RO&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;math.OC/cs.SY&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;quant-ph/cs.IT/math.IT&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;cs.LG/cs.CV/stat.ML&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;cs.SE&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;physics.soc-ph/cs.SI&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;cs.CL&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;cs.FL&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;cs.GT&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;cs.CE&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;cs.DB&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;cs.AR&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;cs.CV/cs.RO&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;cs.SY&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;cs.CV/cs.LG/stat.ML&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;cs.NI&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;cs.SI&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Task 2:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;THEORETICAL&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;ENGINEERING EMPIRICAL&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;THEORETICAL ENGINEERING&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;OTHERS&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;EMPIRICAL&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;THEORETICAL EMPIRICAL&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;ENGINEERING&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;THEORETICAL ENGINEERING EMPIRICAL&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Taiwan&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <actions>
    <action caption='Highlight 1 (generated)' name='[Action1]'>
      <activation auto-clear='true' type='on-select' />
      <source type='sheet' worksheet='Author ' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Authors' />
        <param name='target' value='Author ' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='Author '>
      <table>
        <view>
          <datasources>
            <datasource caption='task2_trainset.csv+ (Multiple Connections)' name='federated.0gpawjk0yfgwq81e3pycg13ecgke' />
          </datasources>
          <datasource-dependencies datasource='federated.0gpawjk0yfgwq81e3pycg13ecgke'>
            <column datatype='string' name='[Authors]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column-instance column='[Authors]' derivation='None' name='[none:Authors:nk]' pivot='key' type='nominal' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0gpawjk0yfgwq81e3pycg13ecgke].[none:Authors:nk]'>
            <groupfilter expression='COUNT([Authors]) &gt; 3' function='filter' user:ui-filter-by-field='true' user:ui-marker='filter-by'>
              <groupfilter function='level-members' level='[none:Authors:nk]' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-manual-selection-is-empty='true' user:ui-marker='enumerate' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0gpawjk0yfgwq81e3pycg13ecgke].[none:Authors:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Text' />
            <encodings>
              <color column='[federated.0gpawjk0yfgwq81e3pycg13ecgke].[none:Authors:nk]' />
              <size column='[federated.0gpawjk0yfgwq81e3pycg13ecgke].[sum:Number of Records:qk]' />
              <text column='[federated.0gpawjk0yfgwq81e3pycg13ecgke].[none:Authors:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{7214A3E0-1B15-41BE-A756-2EDD35D2D10F}' />
    </worksheet>
    <worksheet name='Categories'>
      <table>
        <view>
          <datasources>
            <datasource caption='task2_trainset.csv+ (Multiple Connections)' name='federated.0gpawjk0yfgwq81e3pycg13ecgke' />
          </datasources>
          <datasource-dependencies datasource='federated.0gpawjk0yfgwq81e3pycg13ecgke'>
            <column datatype='string' name='[Categories]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column-instance column='[Categories]' derivation='None' name='[none:Categories:nk]' pivot='key' type='nominal' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0gpawjk0yfgwq81e3pycg13ecgke].[none:Categories:nk]'>
            <groupfilter expression='SUM([Number of Records]) &gt; 50' function='filter' user:ui-filter-by-field='true' user:ui-marker='filter-by'>
              <groupfilter function='level-members' level='[none:Categories:nk]' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-manual-selection-is-empty='true' user:ui-marker='enumerate' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.0gpawjk0yfgwq81e3pycg13ecgke].[none:Categories:nk]' direction='DESC' using='[federated.0gpawjk0yfgwq81e3pycg13ecgke].[sum:Number of Records:qk]' />
          <slices>
            <column>[federated.0gpawjk0yfgwq81e3pycg13ecgke].[none:Categories:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0gpawjk0yfgwq81e3pycg13ecgke].[none:Categories:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0gpawjk0yfgwq81e3pycg13ecgke].[sum:Number of Records:qk]</rows>
        <cols>[federated.0gpawjk0yfgwq81e3pycg13ecgke].[none:Categories:nk]</cols>
      </table>
      <simple-id uuid='{109195AB-2306-4E27-B622-FF730E26D8B1}' />
    </worksheet>
    <worksheet name='Time'>
      <table>
        <view>
          <datasources>
            <datasource caption='task2_trainset.csv+ (Multiple Connections)' name='federated.0gpawjk0yfgwq81e3pycg13ecgke' />
          </datasources>
          <datasource-dependencies datasource='federated.0gpawjk0yfgwq81e3pycg13ecgke'>
            <column datatype='date' name='[Created Date]' role='dimension' type='ordinal' />
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Created Date]' derivation='Month-Trunc' name='[tmn:Created Date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='exp' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.77961325645446777' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0gpawjk0yfgwq81e3pycg13ecgke].[sum:Number of Records:qk]</rows>
        <cols>[federated.0gpawjk0yfgwq81e3pycg13ecgke].[tmn:Created Date:qk]</cols>
      </table>
      <simple-id uuid='{F47A0A87-7A42-43E5-9204-63BE54EDAE0B}' />
    </worksheet>
    <worksheet name='Time_Categories &gt;100'>
      <table>
        <view>
          <datasources>
            <datasource caption='task2_trainset.csv+ (Multiple Connections)' name='federated.0gpawjk0yfgwq81e3pycg13ecgke' />
          </datasources>
          <datasource-dependencies datasource='federated.0gpawjk0yfgwq81e3pycg13ecgke'>
            <column datatype='string' name='[Categories]' role='dimension' type='nominal' />
            <column datatype='date' name='[Created Date]' role='dimension' type='ordinal' />
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column-instance column='[Categories]' derivation='Count' name='[cnt:Categories:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Categories]' derivation='None' name='[none:Categories:nk]' pivot='key' type='nominal' />
            <column-instance column='[Created Date]' derivation='Day-Trunc' name='[tdy:Created Date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0gpawjk0yfgwq81e3pycg13ecgke].[none:Categories:nk]'>
            <groupfilter expression='SUM([Number of Records]) &gt; 100' function='filter' user:ui-filter-by-field='true' user:ui-marker='filter-by'>
              <groupfilter function='level-members' level='[none:Categories:nk]' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-manual-selection-is-empty='true' user:ui-marker='enumerate' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.0gpawjk0yfgwq81e3pycg13ecgke].[none:Categories:nk]' direction='DESC' using='[federated.0gpawjk0yfgwq81e3pycg13ecgke].[cnt:Categories:qk]' />
          <slices>
            <column>[federated.0gpawjk0yfgwq81e3pycg13ecgke].[none:Categories:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0gpawjk0yfgwq81e3pycg13ecgke].[none:Categories:nk]</rows>
        <cols>[federated.0gpawjk0yfgwq81e3pycg13ecgke].[tdy:Created Date:qk]</cols>
      </table>
      <simple-id uuid='{A555D2D1-F616-479F-8E24-268D34167D68}' />
    </worksheet>
    <worksheet name='labels'>
      <table>
        <view>
          <datasources>
            <datasource caption='task2_trainset.csv+ (Multiple Connections)' name='federated.0gpawjk0yfgwq81e3pycg13ecgke' />
          </datasources>
          <datasource-dependencies datasource='federated.0gpawjk0yfgwq81e3pycg13ecgke'>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column datatype='string' name='[Task 2]' role='dimension' type='nominal' />
            <column-instance column='[Task 2]' derivation='None' name='[none:Task 2:nk]' pivot='key' type='nominal' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[pcto:sum:Number of Records:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0gpawjk0yfgwq81e3pycg13ecgke].[none:Task 2:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Task 2:nk]' />
              <groupfilter function='member' level='[none:Task 2:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.0gpawjk0yfgwq81e3pycg13ecgke].[none:Task 2:nk]' direction='DESC' using='[federated.0gpawjk0yfgwq81e3pycg13ecgke].[sum:Number of Records:qk]' />
          <slices>
            <column>[federated.0gpawjk0yfgwq81e3pycg13ecgke].[none:Task 2:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0gpawjk0yfgwq81e3pycg13ecgke].[none:Task 2:nk]' />
              <text column='[federated.0gpawjk0yfgwq81e3pycg13ecgke].[pcto:sum:Number of Records:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0gpawjk0yfgwq81e3pycg13ecgke].[pcto:sum:Number of Records:qk]</rows>
        <cols>[federated.0gpawjk0yfgwq81e3pycg13ecgke].[none:Task 2:nk]</cols>
      </table>
      <simple-id uuid='{4183F400-4495-444F-A90F-4BFDDCC0D86D}' />
    </worksheet>
    <worksheet name='proportion'>
      <table>
        <view>
          <datasources>
            <datasource caption='task2_trainset.csv+ (Multiple Connections)' name='federated.0gpawjk0yfgwq81e3pycg13ecgke' />
          </datasources>
          <datasource-dependencies datasource='federated.0gpawjk0yfgwq81e3pycg13ecgke'>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column datatype='string' name='[Table Name]' role='dimension' type='nominal' />
            <column-instance column='[Table Name]' derivation='None' name='[none:Table Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.0gpawjk0yfgwq81e3pycg13ecgke].[none:Table Name:nk]' value='270' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0gpawjk0yfgwq81e3pycg13ecgke].[none:Table Name:nk]' />
              <text column='[federated.0gpawjk0yfgwq81e3pycg13ecgke].[sum:Number of Records:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0gpawjk0yfgwq81e3pycg13ecgke].[sum:Number of Records:qk]</rows>
        <cols>[federated.0gpawjk0yfgwq81e3pycg13ecgke].[none:Table Name:nk]</cols>
      </table>
      <simple-id uuid='{34C67D50-6B4C-455D-B4C0-790BCD317CFF}' />
    </worksheet>
  </worksheets>
  <windows source-height='30'>
    <window class='worksheet' name='Categories'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0gpawjk0yfgwq81e3pycg13ecgke].[none:Categories:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{078AA8DC-C8AC-4513-B5EA-63E902935EB1}' />
    </window>
    <window class='worksheet' name='Time'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{A5819587-09C6-4551-87D3-73C015FCDC69}' />
    </window>
    <window class='worksheet' name='Author '>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='typeinlist' param='[federated.0gpawjk0yfgwq81e3pycg13ecgke].[none:Authors:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{5CEA58FF-EE97-4F4C-949E-FC31A9E6EF5F}' />
    </window>
    <window class='worksheet' name='proportion'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0gpawjk0yfgwq81e3pycg13ecgke].[none:Table Name:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0gpawjk0yfgwq81e3pycg13ecgke].[none:Table Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{ED64A1A2-12F6-4E58-A522-59E5B48D613B}' />
    </window>
    <window class='worksheet' name='labels'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0gpawjk0yfgwq81e3pycg13ecgke].[none:Task 2:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <selection-collection>
          <node-selection select-tuples='false'>
            <oriented-node-reference orientation='horizontal'>
              <node-reference>
                <fields>
                  <field>[federated.0gpawjk0yfgwq81e3pycg13ecgke].[none:Task 2:nk]</field>
                </fields>
                <multibucket>
                  <bucket>%null%</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
          </node-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.0gpawjk0yfgwq81e3pycg13ecgke].[none:Task 2:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{E3FC9FAF-CCD4-407C-9E76-082DCA8770E4}' />
    </window>
    <window class='worksheet' maximized='true' name='Time_Categories &gt;100'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0gpawjk0yfgwq81e3pycg13ecgke].[none:Categories:nk]</field>
            <field>[federated.0gpawjk0yfgwq81e3pycg13ecgke].[yr:Created Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{34DED732-3AFD-4386-8902-3862C08DCCA7}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Author ' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Categories' width='192'>
      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
      gg==
    </thumbnail>
    <thumbnail height='192' name='Time' width='192'>
      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
      RU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Time_Categories &gt;100' width='192'>
      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
      gFDT/j8bLRMFTusZHgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='labels' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAMhUlEQVR4nO3dy28b1xkF8DMPzpBDUqQk0npTkmW97CR2nTQNUj+KFgZquKsCWQTZdNP/
      oF0XyLJAV1046LJAkGZRZJFVgbZIUqdAWzeJbTmxHrYkW7JoURIpiiI5D3K6kNt6ElOynXAm
      mnt+q6Eoaz7AOrpz536XI7mu64JIUHLQBRAFiQEgoalBF0D0NFynjr9+eAVT08dRtxow1CbW
      N8oYGhtBxK5jdqWAl144/sQ/jwGgQ0VSo+ju7kLMNfHhpzcxklZwe7kIS9Vw8mgfMl1dT/fz
      OAmmw6ZSqUBXJaysb8NQm5D1OKJ6BFLDwlbFQm6g94l/1jMFgJmhsHimS6BqtQpJkr7pWoh8
      90wBkCQJhmF807UQ+Y63QUloDAAJjQEgoTEAJDQGgITGAJDQAmmFsCwLsiyj0WhA0zTYtg1J
      kuA4DhRFgaIokGWZaw3UdoEE4Pr167h69SoWFhbw5ptv4q233sLJkyextLSE+/fv49SpU7h0
      6RIDQG0XSADm5uaQyWRQqVSwsbEBWZahqirOnj0LAHjvvfcwOTmJiYmJIMojgbTsBSoW8lh+
      UITuVqFoKcgRBel0FzJdKVSrVa4EUyi0HAE6OjshrxWQz68hlpZQKxewlcmhIxGDaZpfCcC1
      hTx+/6drbS/4cX7+kxcxNZwJ5Nx0uLUMwNb6A6ixBIaGR9HZM4ym1YetUg2apsFxnK98f6Vm
      YWG12NZiW6madiDnpcOvZQCy/TlkPV9JIHuk7fV8K7iui1qtBlmW4TgOEokEbNuGqqpwHAeN
      RgOqqkJVuZ/osOP/4GO4rosrV67ANE1sbW3hjTfewOXLl3Hx4kV88MEHWFtbw7lz53D+/Hne
      qTrkuBD2GK7r4vbt2xgZGcHLL7+MSqWCoaEhFItFaJqGixcv4sqVKyiXy0GXSl/TM+0Ie9xd
      oI9v3MWv3/n7N1bY0/jVz87j9ERfIOemw02oSyDr2juwb/wxkHPHfvo7yMbTbdim9hMqAO7u
      BpqFW8GcvPnVO2cUPM4BSGgMAAmNASChMQAktJaT4GIhj5n5JeiwocXiqJkmcmPTGMim/ayP
      qK1ajgCqIqMj2YFScRMOIoBTx8yNm7AsC6Zp+lkjUdu0HAGUiI5MJoORwR5EE2m4DRu1er1l
      MxzRYdQyAEYyBSP5yBciCqLRqA8lEfmHk2ASGgNAQmMASGgMAAmNASChMQAkNAaAhMYAkNAY
      ABLavs1wN+aXMNwZwd2SC6lpYnTiBJvhKFRajgCy5CIeT2JtdQWRRBcikoNrn11nMxyFSssR
      QIslMDSgI/vcBOymDLc5ANO02AxHodIyALF4ErH43rGmAIACXdf9qYrIJ5wEk9AYABIaA0BC
      YwBIaAwACY0BIKExACQ0BoCE1nIhzLFNVKoWJNeGHo2h0ZQQURVoWsTP+ojaqmUAqru7mPn8
      FnI9KczdyaPRtDF2/Ds4NtTjZ31EbdXyEqhW3oQUiWN5+T5Offd7GB48goVbs2yGo1BpOQL0
      5MbRk/v/60z6NKZO7B2zGY7CgpNgEhoDQEJjAEhoDAAJjQEgoTEAJDQGgITGAJDQGAASWsuV
      4J3iBlY3yohKFnQjBQdAMp5AOpVs9U+IDp2WAYjGE6gt3kXZrmJ3+QFct4bO/nE8H4/Btm0/
      ayRqm5YB2HpwH4rRgagFjE5MwKoUsL5VgyzLkGVeOVE4tG6GGzoKT+NzZwIDQ3uHiqK0tyoi
      n/BPOQmNASChMQAkNAaAhMYAkNAYABIaA0BCYwBIaAwACa3lSrDbsLG8kodT34YW7YCrKEgm
      OtCVZjMchUfLANi2hZV792BXN6ElemHubiLdP4ZkPArLsmAYhp91ErWFJwDWbgm3bt/F8NgU
      UnEDuaEB7JZj6OwbhWsewXqxBkVRoKotc0N0qDzym+yitFHAg411dPeNIhXXkBseBjD88P00
      +gb2jtgNSmHh+U3eWFtFpbKDnaoVVD1EvnokABJ6BoagRuLo7Y4HVxGRjzwjQCzRgUxnEo1m
      UOUQ+csTALdhYru4DbPhBlUPka88AbBMC7GkAcfknl8Sg/zll7VqNZhKiALgCYDddNB0moho
      3PNLYngkAC7yGzuI6jEcSXOVl8TgWdJNJqJoSp2o1Cyk4npQNRH5xhOAB3dXoGaOAACsahnX
      ZxcRlRqQVA1O08GRvlH0ZVOBFErUDp6FsInJMVR2SijtmIjE4mjUdrGysoxd00FpcwNz8wt8
      SiSFimcESPf0Ib2xg95MApIkYerECdR3h5Ds6kXTqaO8U4WmaXxKJIWGJwDbhXUgosGyHOiq
      hlQqhVTqv5c8ESQS3AtA4eK5DRrRdZS3CqiZ/AtPYvAEQJYlLC4usd2ZhOFZB1ie+wLxpIFC
      iavBJAbPHKA3dxQrlSYyKa4BkBgeCYCEhllBU9GhKLwE+rZzXRdvv/02zpw5g/n5eZw7dw7v
      vvsuTp8+jfn5eZimiVdffRW5XC7oUr/VvPsBOo8gqTqoW42g6qEnJEkSdF1HPp/H4uIiZmZm
      sLa2hu3tbei6ju7ubly+fDnoMr/1PHuCZUlBzDAQ4QhwKLz22msAgFdeeQUA8OKLL3rev3Dh
      gu81HTaeOcDq3UXMLyxjcOy5oOoRXukP78KcnfX9vLJhIPvLX/h+3qB5ArBTMzE5OQ5NleG6
      LnZ2dmDoKnaqJhxXhhHVEDdiQdUqBPvePZhf3PL9vHJSzEVOTwC6MxmUdy1IEmDVyvjXv68j
      o9WwKWXhVtfRO3Icx8cG4brcMknh4LnY1yUXt27dxPauBd1Ior8nAyOZRm9/P0aHB7G1vg7b
      tmFZ/NgUCgfPCBCJRDE2eQxNuwFAxvTx6Ufe7cHR8b0jNsNRWHhGgK3NPD65egOxeDSoeoh8
      5RkBstleTE87sC3+hScxeEaALxYWkUqmkIxHgqqHyFeeEaB/aBT9g/2Q+SR4EoRnBCisLuH6
      zZv8cFwShmdP8NGRHKq1XZjsBSJBeJvhOjqgKxFoGh+AQWLwbIjRE50Y7M1CUzkHIDF4RoDl
      27O4fvNz7Fb5sSckBs+1Tn51CWOTpxCLqnDdJkqlbVS2txDvSMNpyjBiOhJxfmwihYdnR9gr
      53/8v1dmtYxPr83g+YlB3Lw5B8sso2d4CieO5dBs8gkaFA4td77oRgIDPVks3LmHEy88j6Mj
      OWxvbsFxHPYCUWjsc7tHxuT0FIApAEBXahqjx/be0TSt/ZUR+YB7H0loDAAJjQEgoTEAJDT2
      PFDbVKtVvP/++9B1HYODg6jVaojFYpibm0Mul8Pq6irOnz+P3t7ewGrkCEBtYxgGZFmGbdvI
      5/NIpVK4du0akskkxsfHUSwW8dFHHwVaI0cAaqsLFy6gXq8jGo3CcRxcunQJsVgMiUQCr7/+
      OqoBP5aXAaCn9ueFWVTtr/Ew9eKXXpc2n+ifZYw4Xh0effbzPgYDQE/t6uo9FGs138871tXt
      XwAadh1zd+4B1g5UvQOuAnSms8h28ymRFB4tA+ACKG0UoESasEombLOMrW4LqWQMpmnCMNgV
      SodfywCoER2jY0dRr5TQ2TcKu1pCcZtPiaRw2WcOID28P/vwHm28B5msLzUR+YbrACQ0BoCE
      xgCQ0BgAEhoDQELjSjCFzlZ1E7MPPn+i72UAKHQWN2/jt3/7zRN9Ly+BSGgMAAlt/0sg18XM
      Z/+EFOmAoivo6urBETbDUYjsGwDXbaJQKCDepaH6oIBi2UKazXAUIvuPAJKMkaPj6OwZQtMa
      ZDMchc6+AZAkCaPHJh++MtDV7UNFRD7iJJiExgCQ0BgAEhoDQEJjAEhoDAAJjQEgoTEAJDQG
      gIR2YC/Qxx/8BbFEGpVaDcemX8BANu1XbURtt/8I4DZRq1cBLQ4jAnz6yWewLAumyQdpUzjs
      3wskq/j+2R8iEosDDQeW7bAZjkLlwC2RRiK5d6BoiPDxqBQynAST0BgAEhoDQEJjAEhoDAAJ
      jQEgoTEAJDQGgIR24EJYwzZRtxw0XQmapkLnYhiFyAHNcC5ufXIFeasDjdomRidPYny4z6/a
      iNrugEsgF1AiyPYPYniwF4u377AZjkLlgA/GknHipXMPX/Vh8vjeEZvhKCw4CSahMQAkNAaA
      hMYAkNAYABIaA0BCYwBIaAwACY0BIKEd+JTIwnoeRiIJuwFEtQiiUd2n0ojab/9mOLiw62X8
      Y2YWjaaJ3LHnMTna71dtRG134CXQncUVnHzpJYwM9WJl+S6b4ShUDmyGO/ODHwEAulMnMT61
      93U2w1FYcBJMQmMASGgMAAmNASCh/QfGxtV5bMSiDAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='proportion' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
