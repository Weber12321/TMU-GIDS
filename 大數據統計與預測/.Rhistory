df=(n1+n2-2)
cat('T :', t0, '\n')
cat('df :', df, '\n')
if (tail == 'left') {
p = 2*pt(t0, df=df, lower.tail = TRUE)
cat(' ==== Answer ====','\n')
cat('left-tail t test', '\n')
cat('P-value :', p)
}else if(tail == 'two-sided'){
p = 2*pt(t0, df=df, lower.tail = TRUE)
cat(' ==== Answer ====','\n')
cat('two-tails t test', '\n')
cat('P-value :', p)
}else{
p = 2*pt(t0, df=df, lower.tail = FALSE)
cat(' ==== Answer ====','\n')
cat('right-tail t test', '\n')
cat('P-value :', p)
}
}
else{
t0 <- ((x1-x2)-0)/sqrt((s1*s1/n1)+(s2*s2/n2))
df <- ((s1*s1/n1)+(s2*s2/n2))^2/(((s1*s1/n1)^2/(n1-1))+((s2*s2/n2)^2/(n2-1)))
cat('T :', t0, '\n')
cat('df :', df, '\n')
if (tail == 'left') {
p = pt(t0, df=df, lower.tail=TRUE)
cat(' ==== Answer ====','\n')
cat('left-tail t test', '\n')
cat('P-value :', p)
}else if(tail == 'two-sided'){
p = pt(t0, df=df, lower.tail=TRUE)
cat(' ==== Answer ====','\n')
cat('two-tails t test', '\n')
cat('P-value :', p)
}else{
p = pt(t0, df=df, lower.tail=FALSE)
cat(' ==== Answer ====','\n')
cat('right-tail t test', '\n')
cat('P-value :', p)
}
}
}
ind_t(0.98,0.95,0.026,0.025,77,161)
# Q8.c Q11.b
ind_t <- function(x1, x2, s1, s2, n1, n2){
question <- as.character(readline(prompt="Are population variances assume to be equal (y/n) ? : "))
tail <- as.character(readline(prompt='What testing tail is gonna to perform (left/right/two-tails)? :'))
if (question == 'y') {
sp_square <- (((n1-1)*s1*s1)+((n2-1)*s2*s2))/(n1+n2-2)
t0 <- (x1-x2)/sqrt(sp_square*((1/n1)+(1/n2)))
df=(n1+n2-2)
cat('T :', t0, '\n')
cat('df :', df, '\n')
if (tail == 'left') {
p = 2*pt(t0, df=df, lower.tail = TRUE)
cat(' ==== Answer ====','\n')
cat('left-tail t test', '\n')
cat('P-value :', p)
}else if(tail == 'two-tails'){
p = 2*pt(t0, df=df, lower.tail = TRUE)
cat(' ==== Answer ====','\n')
cat('two-tails t test', '\n')
cat('P-value :', p)
}else{
p = 2*pt(t0, df=df, lower.tail = FALSE)
cat(' ==== Answer ====','\n')
cat('right-tail t test', '\n')
cat('P-value :', p)
}
}
else{
t0 <- ((x1-x2)-0)/sqrt((s1*s1/n1)+(s2*s2/n2))
df <- ((s1*s1/n1)+(s2*s2/n2))^2/(((s1*s1/n1)^2/(n1-1))+((s2*s2/n2)^2/(n2-1)))
cat('T :', t0, '\n')
cat('df :', df, '\n')
if (tail == 'left') {
p = pt(t0, df=df, lower.tail=TRUE)
cat(' ==== Answer ====','\n')
cat('left-tail t test', '\n')
cat('P-value :', p)
}else if(tail == 'two-tails'){
p = pt(t0, df=df, lower.tail=TRUE)
cat(' ==== Answer ====','\n')
cat('two-tails t test', '\n')
cat('P-value :', p)
}else{
p = pt(t0, df=df, lower.tail=FALSE)
cat(' ==== Answer ====','\n')
cat('right-tail t test', '\n')
cat('P-value :', p)
}
}
}
ind_t(0.98,0.95,0.026,0.025,77,161)
# Q8.c Q11.b
ind_t <- function(x1, x2, s1, s2, n1, n2){
question <- as.character(readline(prompt="Are population variances assume to be equal (y/n) ? : "))
tail <- as.character(readline(prompt='What testing tail is gonna to perform (left/right/two-tails)? :'))
if (question == 'y') {
sp_square <- (((n1-1)*s1*s1)+((n2-1)*s2*s2))/(n1+n2-2)
t0 <- (x1-x2)/sqrt(sp_square*((1/n1)+(1/n2)))
df=(n1+n2-2)
cat('T :', t0, '\n')
cat('df :', df, '\n')
if (tail == 'left') {
p = 2*pt(t0, df=df, lower.tail = TRUE)
cat(' ==== Answer ====','\n')
cat('left-tail t test', '\n')
cat('P-value :', p)
}else if(tail == 'two-tails'){
p = 2*pt(t0, df=df)
cat(' ==== Answer ====','\n')
cat('two-tails t test', '\n')
cat('P-value :', p)
}else{
p = 2*pt(t0, df=df, lower.tail = FALSE)
cat(' ==== Answer ====','\n')
cat('right-tail t test', '\n')
cat('P-value :', p)
}
}
else{
t0 <- ((x1-x2)-0)/sqrt((s1*s1/n1)+(s2*s2/n2))
df <- ((s1*s1/n1)+(s2*s2/n2))^2/(((s1*s1/n1)^2/(n1-1))+((s2*s2/n2)^2/(n2-1)))
cat('T :', t0, '\n')
cat('df :', df, '\n')
if (tail == 'left') {
p = pt(t0, df=df, lower.tail=TRUE)
cat(' ==== Answer ====','\n')
cat('left-tail t test', '\n')
cat('P-value :', p)
}else if(tail == 'two-tails'){
p = pt(t0, df=df)
cat(' ==== Answer ====','\n')
cat('two-tails t test', '\n')
cat('P-value :', p)
}else{
p = pt(t0, df=df, lower.tail=FALSE)
cat(' ==== Answer ====','\n')
cat('right-tail t test', '\n')
cat('P-value :', p)
}
}
}
ind_t(0.98,0.95,0.026,0.025,77,161)
ind_t(0.098,0.095,0.026,0.025,77,161)
pt(0.85, 236)
ind_t <- function(x1, x2, s1, s2, n1, n2){
question <- as.character(readline(prompt="Are population variances assume to be equal (y/n) ? : "))
tail <- as.character(readline(prompt='What testing tail is gonna to perform (left/right/two-tails)? :'))
if (question == 'y') {
sp_square <- (((n1-1)*s1*s1)+((n2-1)*s2*s2))/(n1+n2-2)
t0 <- (x1-x2)/sp_square*sqrt(((1/n1)+(1/n2)))
df=(n1+n2-2)
cat('T :', t0, '\n')
cat('df :', df, '\n')
if (tail == 'left') {
p = pt(t0, df=df, lower.tail = TRUE)
cat(' ==== Answer ====','\n')
cat('left-tail t test', '\n')
cat('P-value :', p)
}else if(tail == 'two-tails'){
p = 2*pt(t0, df=df)
cat(' ==== Answer ====','\n')
cat('two-tails t test', '\n')
cat('P-value :', p)
}else{
p = pt(t0, df=df, lower.tail = FALSE)
cat(' ==== Answer ====','\n')
cat('right-tail t test', '\n')
cat('P-value :', p)
}
}
else{
t0 <- ((x1-x2)-0)/sqrt((s1*s1/n1)+(s2*s2/n2))
df <- ((s1*s1/n1)+(s2*s2/n2))^2/(((s1*s1/n1)^2/(n1-1))+((s2*s2/n2)^2/(n2-1)))
cat('T :', t0, '\n')
cat('df :', df, '\n')
if (tail == 'left') {
p = pt(t0, df=df, lower.tail=TRUE)
cat(' ==== Answer ====','\n')
cat('left-tail t test', '\n')
cat('P-value :', p)
}else if(tail == 'two-tails'){
p = 2*pt(t0, df=df)
cat(' ==== Answer ====','\n')
cat('two-tails t test', '\n')
cat('P-value :', p)
}else{
p = pt(t0, df=df, lower.tail=FALSE)
cat(' ==== Answer ====','\n')
cat('right-tail t test', '\n')
cat('P-value :', p)
}
}
}
ind_t(0.098,0.095,0.026,0.025,77,161)
# Q8.c Q11.b
ind_t <- function(x1, x2, s1, s2, n1, n2){
question <- as.character(readline(prompt="Are population variances assume to be equal (y/n) ? : "))
tail <- as.character(readline(prompt='What testing tail is gonna to perform (left/right/two-tails)? :'))
if (question == 'y') {
sp_square <- (((n1-1)*s1*s1)+((n2-1)*s2*s2))/(n1+n2-2)
t0 <- (x1-x2)/sqrt(sp_square)*sqrt(((1/n1)+(1/n2)))
df=(n1+n2-2)
cat('T :', t0, '\n')
cat('df :', df, '\n')
if (tail == 'left') {
p = pt(t0, df=df, lower.tail = TRUE)
cat(' ==== Answer ====','\n')
cat('left-tail t test', '\n')
cat('P-value :', p)
}else if(tail == 'two-tails'){
p = 2*pt(t0, df=df)
cat(' ==== Answer ====','\n')
cat('two-tails t test', '\n')
cat('P-value :', p)
}else{
p = pt(t0, df=df, lower.tail = FALSE)
cat(' ==== Answer ====','\n')
cat('right-tail t test', '\n')
cat('P-value :', p)
}
}
else{
t0 <- ((x1-x2)-0)/sqrt((s1*s1/n1)+(s2*s2/n2))
df <- ((s1*s1/n1)+(s2*s2/n2))^2/(((s1*s1/n1)^2/(n1-1))+((s2*s2/n2)^2/(n2-1)))
cat('T :', t0, '\n')
cat('df :', df, '\n')
if (tail == 'left') {
p = pt(t0, df=df, lower.tail=TRUE)
cat(' ==== Answer ====','\n')
cat('left-tail t test', '\n')
cat('P-value :', p)
}else if(tail == 'two-tails'){
p = 2*pt(t0, df=df)
cat(' ==== Answer ====','\n')
cat('two-tails t test', '\n')
cat('P-value :', p)
}else{
p = pt(t0, df=df, lower.tail=FALSE)
cat(' ==== Answer ====','\n')
cat('right-tail t test', '\n')
cat('P-value :', p)
}
}
}
ind_t(0.098,0.095,0.026,0.025,77,161)
ind_t <- function(x1, x2, s1, s2, n1, n2){
question <- as.character(readline(prompt="Are population variances assume to be equal (y/n) ? : "))
tail <- as.character(readline(prompt='What testing tail is gonna to perform (left/right/two-tails)? :'))
if (question == 'y') {
sp_square <- (((n1-1)*s1*s1)+((n2-1)*s2*s2))/(n1+n2-2)
t0 <- (x1-x2)/(sqrt(sp_square)*sqrt((1/n1)+(1/n2)))
df=(n1+n2-2)
cat('T :', t0, '\n')
cat('df :', df, '\n')
if (tail == 'left') {
p = pt(t0, df=df, lower.tail = TRUE)
cat(' ==== Answer ====','\n')
cat('left-tail t test', '\n')
cat('P-value :', p)
}else if(tail == 'two-tails'){
p = 2*pt(t0, df=df)
cat(' ==== Answer ====','\n')
cat('two-tails t test', '\n')
cat('P-value :', p)
}else{
p = pt(t0, df=df, lower.tail = FALSE)
cat(' ==== Answer ====','\n')
cat('right-tail t test', '\n')
cat('P-value :', p)
}
}
else{
t0 <- ((x1-x2)-0)/sqrt((s1*s1/n1)+(s2*s2/n2))
df <- ((s1*s1/n1)+(s2*s2/n2))^2/(((s1*s1/n1)^2/(n1-1))+((s2*s2/n2)^2/(n2-1)))
cat('T :', t0, '\n')
cat('df :', df, '\n')
if (tail == 'left') {
p = pt(t0, df=df, lower.tail=TRUE)
cat(' ==== Answer ====','\n')
cat('left-tail t test', '\n')
cat('P-value :', p)
}else if(tail == 'two-tails'){
p = 2*pt(t0, df=df)
cat(' ==== Answer ====','\n')
cat('two-tails t test', '\n')
cat('P-value :', p)
}else{
p = pt(t0, df=df, lower.tail=FALSE)
cat(' ==== Answer ====','\n')
cat('right-tail t test', '\n')
cat('P-value :', p)
}
}
}
ind_t(0.098,0.095,0.026,0.025,77,161)
((76*(0.026)^2)+(161*(0.025)^2))/236
# Q8.c Q11.b
ind_t <- function(x1, x2, s1, s2, n1, n2){
question <- as.character(readline(prompt="Are population variances assume to be equal (y/n) ? : "))
tail <- as.character(readline(prompt='What testing tail is gonna to perform (left/right/two-tails)? :'))
if (question == 'y') {
sp_square <- (((n1-1)*s1*s1)+((n2-1)*s2*s2))/(n1+n2-2)
t0 <- (x1-x2)/(sqrt(sp_square)*sqrt((1/n1)+(1/n2)))
df=(n1+n2-2)
cat('sp square :', sp_square, '\n')
cat('T :', t0, '\n')
cat('df :', df, '\n')
if (tail == 'left') {
p = pt(t0, df=df, lower.tail = TRUE)
cat(' ==== Answer ====','\n')
cat('left-tail t test', '\n')
cat('P-value :', p)
}else if(tail == 'two-tails'){
p = 2*pt(t0, df=df)
cat(' ==== Answer ====','\n')
cat('two-tails t test', '\n')
cat('P-value :', p)
}else{
p = pt(t0, df=df, lower.tail = FALSE)
cat(' ==== Answer ====','\n')
cat('right-tail t test', '\n')
cat('P-value :', p)
}
}
else{
t0 <- ((x1-x2)-0)/sqrt((s1*s1/n1)+(s2*s2/n2))
df <- ((s1*s1/n1)+(s2*s2/n2))^2/(((s1*s1/n1)^2/(n1-1))+((s2*s2/n2)^2/(n2-1)))
cat('T :', t0, '\n')
cat('df :', df, '\n')
if (tail == 'left') {
p = pt(t0, df=df, lower.tail=TRUE)
cat(' ==== Answer ====','\n')
cat('left-tail t test', '\n')
cat('P-value :', p)
}else if(tail == 'two-tails'){
p = 2*pt(t0, df=df)
cat(' ==== Answer ====','\n')
cat('two-tails t test', '\n')
cat('P-value :', p)
}else{
p = pt(t0, df=df, lower.tail=FALSE)
cat(' ==== Answer ====','\n')
cat('right-tail t test', '\n')
cat('P-value :', p)
}
}
}
ind_t(0.098,0.095,0.026,0.025,77,161)
((76*(0.026)^2)+(161*(0.025)^2))/236
0.003/(sqrt(0.000644072)*sqrt((1/77)+(1/161)))
pt(0.8549064, 236)
pt(0.8549064, 236, lower.tail = FALSE)
pt(0.8549064, 236, ncp = 0)
?p.value()
73+105+240+1080
1498-4
group_var(4, 0.05) # Run code ...
group_var <- function(k, afa){
cat('==== fill in the sums of the obs ====', '\n')
N <- c()
for (i in c(1:k)) {
n <- as.numeric(readline(prompt="Enter n: "))
N <- append(N, n)
}
cat('Sums of the obs are : ', N ,'\n')
cat('\n', '==== fill in the means of the obs ====', '\n')
M <- c()
for (j in c(1:k)) {
m <- as.numeric(readline(prompt="Enter means: "))
M <- append(M, m)
}
cat('Means of the obs are : ', M ,'\n')
cat('\n', '==== fill in the sds of the obs ====', '\n')
S <- c()
for (l in c(1:k)) {
s <- as.numeric(readline(prompt="Enter sds: "))
S <- append(S, s)
}
cat('Sds of the obs are : ', S ,'\n')
in_group_var <- sum(((N-1)*(S^2)))/(sum(N)-k)
cat('\n', '==== within group var ====', '\n', in_group_var, '\n')
xbar <- sum(N*M)/sum(N)
be_group_var <- sum(N*((M-xbar)^2))/(k-1)
cat('\n', '==== between group var ====', '\n', be_group_var, '\n', '\n')
com_n <- dim(combn(k, 2))[2]
C <- as.data.frame(combn(k, 2))
for(col in C){
X <- c(M[col[1]],M[col[2]])
Num <- c(N[col[1]],N[col[2]])
afa_new <- afa/com_n
cat('new alpha :', afa_new, '\n','\n')
t <- (X[1]-X[2])/sqrt(in_group_var*((1/Num[1])+(1/Num[2])))
df <- sum(N)-k
cat('==== T value of condition ====', '\n', col[1], '&', col[2], ':', t, '\n')
pval <- 2*pt(-abs(t), df=df)
cat('==== P value of condition ====', '\n', col[1], '&', col[2], ':', pval, '\n','\n')
if (pval < afa_new) {
cat('Reject H0 in the condition of', col[1], '&', col[2], '\n')
}else{
cat('Do not reject H0 in the condition of', col[1], '&', col[2], '\n')
}
cat('\n', '\n')
}
}
group_var(4, 0.05) # Run code ...
group_var <- function(k, afa){
cat('==== fill in the sums of the obs ====', '\n')
N <- c()
for (i in c(1:k)) {
n <- as.numeric(readline(prompt="Enter n: "))
N <- append(N, n)
}
cat('Sums of the obs are : ', N ,'\n')
cat('\n', '==== fill in the means of the obs ====', '\n')
M <- c()
for (j in c(1:k)) {
m <- as.numeric(readline(prompt="Enter means: "))
M <- append(M, m)
}
cat('Means of the obs are : ', M ,'\n')
cat('\n', '==== fill in the sds of the obs ====', '\n')
S <- c()
for (l in c(1:k)) {
s <- as.numeric(readline(prompt="Enter sds: "))
S <- append(S, s)
}
cat('Sds of the obs are : ', S ,'\n')
in_group_var <- sum(((N-1)*(S^2)))/(sum(N)-k)
cat('\n', '==== within group var ====', '\n', in_group_var, '\n')
xbar <- sum(N*M)/sum(N)
be_group_var <- sum(N*((M-xbar)^2))/(k-1)
cat('\n', '==== between group var ====', '\n', be_group_var, '\n', '\n')
f = be_group_var/in_group_var
p <- pf(f, sum(N)-k, k-1, lower.tail = FALSE)
cat('\n', '==== p-value for f-distribution ====', '\n', p, '\n', '\n')
# multi comparison
com_n <- dim(combn(k, 2))[2]
C <- as.data.frame(combn(k, 2))
for(col in C){
X <- c(M[col[1]],M[col[2]])
Num <- c(N[col[1]],N[col[2]])
afa_new <- afa/com_n
cat('new alpha :', afa_new, '\n','\n')
t <- (X[1]-X[2])/sqrt(in_group_var*((1/Num[1])+(1/Num[2])))
df <- sum(N)-k
cat('==== T value of condition ====', '\n', col[1], '&', col[2], ':', t, '\n')
pval <- 2*pt(-abs(t), df=df)
cat('==== P value of condition ====', '\n', col[1], '&', col[2], ':', pval, '\n','\n')
if (pval < afa_new) {
cat('Reject H0 in the condition of', col[1], '&', col[2], '\n')
}else{
cat('Do not reject H0 in the condition of', col[1], '&', col[2], '\n')
}
cat('\n', '\n')
}
}
group_var(4, 0.05) # Run code ...
# CVD
# Linear Regression
getwd()
setwd("~/GitHub/TMU-GIDS/大數據統計與預測")
# CVD
# Linear Regression
# getwd()
setwd("~/GitHub/TMU-GIDS/大數據統計與預測")
CVD <- read.csv('CVD_ALL.csv')
View(CVD)
# set working dir
setwd('C:/Users/doudi/Downloads')
# load packages
library(dplyr)
library(magrittr)
# load file
data <- read.csv('CVD_ALL.csv', encoding = 'utf-8')
df <- data[,c(6,16)]
colnames(df) <- c('waist', 'Smoke')
# drop NA
sapply(df, function(x) {sum(is.na(x))})
df = df %>% na.omit()
View(df)
# dummy vars
require(dummies)
install.packages('dummies')
# dummy vars
require(dummies)
alldummy_data <- dummy.data.frame(df)
View(alldummy_data)
# dummy vars
justdummy_data <- model.matrix(~df$Smoke-1)
alldummy_data <- cbind(df,justdummy_data)
View(alldummy_data)
View(data)
# dummy vars
df$Smoke = df$Smoke %>% as.factor()
justdummy_data <- model.matrix(~df$Smoke-1)
alldummy_data <- cbind(df,justdummy_data)
View(alldummy_data)
colnames(alldummy_data) <- c('waist', 'Smoke', '0', '1', '2', '3')
alldummy_data.fit <- lm(waist ~ zero + one + two + three ,data = alldummy_data)
colnames(alldummy_data) <- c('waist', 'Smoke', 'zero', 'one', 'two', 'three')
alldummy_data.fit <- lm(waist ~ zero + one + two + three ,data = alldummy_data)
summary(alldummy_data.fit)
# no dummy
df.fit <- lm(waist ~ smoke, data = df)
View(df)
# no dummy
df.fit <- lm(waist ~ Smoke, data = df)
summary(df.fit)
