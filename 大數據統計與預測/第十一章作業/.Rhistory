1-pnorm(2500,3500,430/sqrt(5))
(1-pnorm(2500,3500,430/sqrt(5)))^4
factorial(5)*pnorm(2500,3500,430/sqrt(5))*(1-pnorm(2500,3500,430/sqrt(5)))^4
5*pnorm(2500,3500,430)*(1-pnorm(2500,3500,430/sqrt(4)))^4
5*pnorm(2500,3500,430)*(pnorm(2500,3500,430/sqrt(4)))^4
5*pnorm(2500,3500,430)*(pnorm(2500,3500,430)^4
5*pnorm(2500,3500,430)*pnorm(2500,3500,430)^4
5*pnorm(2500,3500,430)*(1-pnorm(2500,3500,430)^4)
5*pnorm(2500,3500,430)*(1-pnorm(2500,3500,430))^4
range_normal_sampling(13,13.6,1,13.3,0.2891828)
# range i~j P(i<=x<j) or ~i-j~ (x<i & x>=j) , sample size (s):
range_normal_sampling_2 <- function(i,j,mean,standard_error){
ans = pnorm(j, mean, standard_error, lower.tail = TRUE, log.p = FALSE)-pnorm(i, mean, standard_error, lower.tail = TRUE, log.p = FALSE)
cat(' inside range ',i,' to ',j,' is :',ans,'\n',' outside range ',' is :',(1-ans))
}
range_normal_sampling_2(13,13.6,13.3,0.2891828)
pnorm(13.6, 13.3, 0.2891828,lower.tail = TRUE, log.p = FALSE)-pnorm(13.0, 13.3, 0.2891828,lower.tail = TRUE, log.p = FALSE)
# ci_normal
ci_normal <- function(x, sigma, ci_rate, size){
up <- 0
low <= 0
if (ci_rate == 0.99){
up <- x + 2.58*(sigma/sqrt(size))
low <- x - 2.58*(sigma/sqrt(size))
}
else if (ci_rate == 0.95) {
up <- x + 1.96*(sigma/sqrt(size))
low <- x - 1.96*(sigma/sqrt(size))
}
else {
up <- x + 1.645*(sigma/sqrt(size))
low <- x - 1.645*(sigma/sqrt(size))
}
cat('(',up,',',low,')')
}
ci_normal(130,11.8,0.95,10)
# ci_normal
ci_normal <- function(x, sigma, ci_rate, size){
up <- 0
low <- 0
if (ci_rate == 0.99){
up <- x + 2.58*(sigma/sqrt(size))
low <- x - 2.58*(sigma/sqrt(size))
}
else if (ci_rate == 0.95) {
up <- x + 1.96*(sigma/sqrt(size))
low <- x - 1.96*(sigma/sqrt(size))
}
else {
up <- x + 1.645*(sigma/sqrt(size))
low <- x - 1.645*(sigma/sqrt(size))
}
cat('(',up,',',low,')')
}
ci_normal(130,11.8,0.95,10)
# ci_normal
ci_normal <- function(x, sigma, ci_rate, size){
up <- 0
low <- 0
if (ci_rate == 0.99){
up <- x + 2.58*(sigma/sqrt(size))
low <- x - 2.58*(sigma/sqrt(size))
}
else if (ci_rate == 0.95) {
up <- x + 1.96*(sigma/sqrt(size))
low <- x - 1.96*(sigma/sqrt(size))
}
else {
up <- x + 1.645*(sigma/sqrt(size))
low <- x - 1.645*(sigma/sqrt(size))
}
cat('(',low,',',up,')')
}
ci_normal(130,11.8,0.95,10)
source('~/TMU-GIDS/大數據統計與預測/temp.R')
# Q9. pop sd is known
cal_pval <- function(){
sample_avg <- as.numeric(readline(prompt="Enter number as numerical list: "))
h0 <- as.numeric(readline(prompt="Enter number as numerical list: "))
sd <- as.numeric(readline(prompt="Enter number as numerical list: "))
size <- as.numeric(readline(prompt="Enter number as numerical list: "))
cat('Sample avg :', sample_avg, '\n', 'Null hypothesis :', h0, '\n', 'Standard deviation (popluation) :'
, sd, '\n', 'Sample size :', size)
z <- (sample_avg-h0)/(sd/sqrt(size))
p <- 2*pnorm(-abs(z))
cat('P-value :', p)
}
cal_pval
cal_pval()
size <- as.numeric(readline(prompt="Enter sample size: "))
cal_pval <- function(){
sample_avg <- as.numeric(readline(prompt="Enter Sample avg: "))
h0 <- as.numeric(readline(prompt="Enter null hypothesis: "))
sd <- as.numeric(readline(prompt="Enter standard deviation (popluation): "))
size <- as.numeric(readline(prompt="Enter sample size: "))
cat('Sample avg :', sample_avg, '\n', 'Null hypothesis :', h0, '\n', 'Standard deviation (popluation) :'
, sd, '\n', 'Sample size :', size)
z <- (sample_avg-h0)/(sd/sqrt(size))
p <- 2*pnorm(-abs(z))
cat('P-value :', p)
}
cal_pval()
cat(' Sample avg :', sample_avg, '\n', 'Null hypothesis :', h0, '\n', 'Standard deviation (popluation) :'
, sd, '\n', 'Sample size :', size, '\n')
# === Chp 10 code (hypothesis test)
# Q9. pop sd is known
cal_pval <- function(){
sample_avg <- as.numeric(readline(prompt="Enter Sample avg: "))
h0 <- as.numeric(readline(prompt="Enter null hypothesis: "))
sd <- as.numeric(readline(prompt="Enter standard deviation (popluation): "))
size <- as.numeric(readline(prompt="Enter sample size: "))
cat(' Sample avg :', sample_avg, '\n', 'Null hypothesis :', h0, '\n', 'Standard deviation (popluation) :'
, sd, '\n', 'Sample size :', size, '\n')
z <- (sample_avg-h0)/(sd/sqrt(size))
p <- 2*pnorm(-abs(z))
cat('P-value :', p)
}
cal_pval()
# Q9. pop sd is known
cal_pval <- function(){
sample_avg <- as.numeric(readline(prompt="Enter Sample avg: "))
h0 <- as.numeric(readline(prompt="Enter null hypothesis: "))
sd <- as.numeric(readline(prompt="Enter standard deviation (popluation): "))
size <- as.numeric(readline(prompt="Enter sample size: "))
cat(' Sample avg :', sample_avg, '\n', 'Null hypothesis :', h0, '\n', 'Standard deviation (popluation) :'
, sd, '\n', 'Sample size :', size, '\n')
z <- (sample_avg-h0)/(sd/sqrt(size))
p <- 2*pnorm(-abs(z))
cat('\n','P-value :', p)
}
# Q9. pop sd is known
cal_pval <- function(){
sample_avg <- as.numeric(readline(prompt="Enter Sample avg: "))
h0 <- as.numeric(readline(prompt="Enter null hypothesis: "))
sd <- as.numeric(readline(prompt="Enter standard deviation (popluation): "))
size <- as.numeric(readline(prompt="Enter sample size: "))
cat(' Sample avg :', sample_avg, '\n', 'Null hypothesis :', h0, '\n', 'Standard deviation (popluation) :'
, sd, '\n', 'Sample size :', size, '\n')
z <- (sample_avg-h0)/(sd/sqrt(size))
p <- 2*pnorm(-abs(z))
cat('\n','P-value :', p)
}
cal_pval()
# Q9. pop sd is known
cal_pval <- function(){
sample_avg <- as.numeric(readline(prompt="Enter Sample avg: "))
h0 <- as.numeric(readline(prompt="Enter null hypothesis: "))
sd <- as.numeric(readline(prompt="Enter standard deviation (popluation): "))
size <- as.numeric(readline(prompt="Enter sample size: "))
cat(' Sample avg :', sample_avg, '\n', 'Null hypothesis :', h0, '\n', 'Standard deviation (popluation) :'
, sd, '\n', 'Sample size :', size, '\n')
z <- (sample_avg-h0)/(sd/sqrt(size))
alpha = 0.05
z.half.alpha = qnorm(1-alpha/2)
ans <- c(-z.half.alpha, z.half.alpha)
cat('\n','P-value :', ans)
}
cal_pval()
# === Chp 10 code (hypothesis test)
# Q9. pop sd is known
cal_pval <- function(){
sample_avg <- as.numeric(readline(prompt="Enter Sample avg: "))
h0 <- as.numeric(readline(prompt="Enter null hypothesis: "))
sd <- as.numeric(readline(prompt="Enter standard deviation (popluation): "))
size <- as.numeric(readline(prompt="Enter sample size: "))
cat(' Sample avg :', sample_avg, '\n', 'Null hypothesis :', h0, '\n', 'Standard deviation (popluation) :'
, sd, '\n', 'Sample size :', size, '\n')
z <- (sample_avg-h0)/(sd/sqrt(size))
alpha = 0.05
z.half.alpha = qnorm(1-alpha/2)
ans <- c(-z.half.alpha, z.half.alpha)
cat('\n', 'Area', ans)
pval = 2*pnorm(z)
cat('\n','P-value :', pval)
}
cal_pval()
# === Chp 10 code (hypothesis test)
# Q9. pop sd is known
cal_pval <- function(){
sample_avg <- as.numeric(readline(prompt="Enter Sample avg: "))
h0 <- as.numeric(readline(prompt="Enter null hypothesis: "))
sd <- as.numeric(readline(prompt="Enter standard deviation (popluation): "))
size <- as.numeric(readline(prompt="Enter sample size: "))
cat(' Sample avg :', sample_avg, '\n', 'Null hypothesis :', h0, '\n', 'Standard deviation (popluation) :'
, sd, '\n', 'Sample size :', size, '\n')
z <- (sample_avg-h0)/(sd/sqrt(size))
alpha = 0.05
z.half.alpha = qnorm(1-alpha/2)
ans <- c(-z.half.alpha, z.half.alpha)
cat('\n', 'Area', ans, '\n','Z :', z)
pval = 2*pnorm(z)
cat('\n','P-value :', pval)
}
cal_pval()
(84-74.4)/(9.1/sqrt(10))
cal_pval <- function(){
sample_avg <- as.numeric(readline(prompt="Enter Sample avg: "))
h0 <- as.numeric(readline(prompt="Enter null hypothesis: "))
sd <- as.numeric(readline(prompt="Enter standard deviation (popluation): "))
size <- as.numeric(readline(prompt="Enter sample size: "))
cat(' Sample avg :', sample_avg, '\n', 'Null hypothesis :', h0, '\n', 'Standard deviation (popluation) :'
, sd, '\n', 'Sample size :', size, '\n')
z <- (sample_avg-h0)/(sd/sqrt(size))
alpha = 0.05
z.half.alpha = qnorm(1-alpha/2)
ans <- c(-z.half.alpha, z.half.alpha)
cat('\n', 'Area', ans, '\n','Z :', z)
p = 2*pnorm(-abs(z))
cat('\n','P-value :', p)
}
cal_pval()
# Q11.
dt(25, 58, ncp, log = FALSE)
# Q11.
dt(25, 58, log = FALSE)
# Q11.
qt(25, 58, lower.tail = TRUE, log.p = FALSE)
t_dis_ci <- function(x, sd, n, ci_rate){
ci <- 1 - ((1 - ci_rate)/2)
error <- qt(ci,df = n-1)*s/sqrt(n)
left <- x - error
right <- x + error
cat('(',left,',',right,')')
}
# T distribution calculate confidence interval
t_dis_ci <- function(){
x <- as.numeric(readline(prompt="Enter sample mean: "))
sd <- as.numeric(readline(prompt="Enter sample standard deviation: "))
n <- as.numeric(readline(prompt="Enter size: "))
ci_rate <- as.numeric(readline(prompt="Enter confidential rate: "))
cat('Sample mean :', x,'\n')
cat('Sample standard deviation :', sd,'\n')
cat('Size :', n,'\n')
cat('Confidential rate', ci_rate*100, ' %','\n')
ci <- 1 - ((1 - ci_rate)/2)
error <- qt(ci,df = n-1)*s/sqrt(n)
left <- x - error
right <- x + error
cat('(',left,',',right,')')
}
t_dis_ci()
t_dis_ci <- function(){
x <- as.numeric(readline(prompt="Enter sample mean: "))
sd <- as.numeric(readline(prompt="Enter sample standard deviation: "))
n <- as.numeric(readline(prompt="Enter size: "))
ci_rate <- as.numeric(readline(prompt="Enter confidential rate: "))
cat('Sample mean :', x,'\n')
cat('Sample standard deviation :', sd,'\n')
cat('Size :', n,'\n')
cat('Confidential rate', ci_rate*100, ' %','\n')
ci <- 1 - ((1 - ci_rate)/2)
error <- qt(ci,df = n-1)*sd/sqrt(n)
left <- x - error
right <- x + error
cat('(',left,',',right,')')
}
t_dis_ci()
# Q11.
# T distribution calculate confidence interval
t_dis_ci <- function(){
x <- as.numeric(readline(prompt="Enter sample mean: "))
sd <- as.numeric(readline(prompt="Enter sample standard deviation: "))
n <- as.numeric(readline(prompt="Enter size: "))
ci_rate <- as.numeric(readline(prompt="Enter confidential rate: "))
cat('Sample mean :', x,'\n')
cat('Sample standard deviation :', sd,'\n')
cat('Size :', n,'\n')
cat('Confidential rate :', ci_rate*100, '%','\n')
ci <- 1 - ((1 - ci_rate)/2)
error <- qt(ci,df = n-1)*sd/sqrt(n)
left <- x - error
right <- x + error
cat('Confidence interval :', '(',left, ',', right, ')')
}
t_dis_ci()
# Q11.
# T distribution calculate confidence interval
t_dis_ci <- function(){
x <- as.numeric(readline(prompt="Enter sample mean: "))
sd <- as.numeric(readline(prompt="Enter sample standard deviation: "))
n <- as.numeric(readline(prompt="Enter size: "))
ci_rate <- as.numeric(readline(prompt="Enter confidential rate: "))
cat('Sample mean :', x,'\n')
cat('Sample standard deviation :', sd,'\n')
cat('Size :', n,'\n')
cat('Confidential rate :', ci_rate*100, '%','\n')
ci <- 1 - ((1 - ci_rate)/2)
error <- qt(ci,df = n-1)*sd/sqrt(n)
left <- x - error
right <- x + error
print('==== Answer ====')
cat('Confidence interval :', '(',left, ',', right, ')')
}
t_dis_ci()
# T distribution calculate confidence interval
t_dis_ci <- function(){
x <- as.numeric(readline(prompt="Enter sample mean: "))
sd <- as.numeric(readline(prompt="Enter sample standard deviation: "))
n <- as.numeric(readline(prompt="Enter size: "))
ci_rate <- as.numeric(readline(prompt="Enter confidential rate: "))
cat('Sample mean :', x,'\n')
cat('Sample standard deviation :', sd,'\n')
cat('Size :', n,'\n')
cat('Confidential rate :', ci_rate*100, '%','\n')
ci <- 1 - ((1 - ci_rate)/2)
error <- qt(ci,df = n-1)*sd/sqrt(n)
left <- x - error
right <- x + error
cat('==== Answer ====')
cat('Confidence interval :', '(',left, ',', right, ')')
}
t_dis_ci()
# T distribution calculate confidence interval
t_dis_ci <- function(){
x <- as.numeric(readline(prompt="Enter sample mean: "))
sd <- as.numeric(readline(prompt="Enter sample standard deviation: "))
n <- as.numeric(readline(prompt="Enter size: "))
ci_rate <- as.numeric(readline(prompt="Enter confidential rate: "))
cat('Sample mean :', x,'\n')
cat('Sample standard deviation :', sd,'\n')
cat('Size :', n,'\n')
cat('Confidential rate :', ci_rate*100, '%','\n')
ci <- 1 - ((1 - ci_rate)/2)
error <- qt(ci,df = n-1)*sd/sqrt(n)
left <- x - error
right <- x + error
cat('==== Answer ====', '\n')
cat('Confidence interval :', '(',left, ',', right, ')')
}
t_dis_ci()
# Q11.
# T distribution calculate confidence interval
t_dis_ci <- function(){
x <- as.numeric(readline(prompt="Enter sample mean: "))
sd <- as.numeric(readline(prompt="Enter sample standard deviation: "))
n <- as.numeric(readline(prompt="Enter size: "))
ci_rate <- as.numeric(readline(prompt="Enter confidential rate: "))
cat('Sample mean :', x,'\n')
cat('Sample standard deviation :', sd,'\n')
cat('Size :', n,'\n')
cat('Confidential rate :', ci_rate*100, '%','\n')
ci <- 1 - ((1 - ci_rate)/2)
error <- qt(ci,df = n-1)*sd/sqrt(n)
left <- x - error
right <- x + error
cat('\n', '==== Answer ====', '\n')
cat('Confidence interval :', '(',left, ',', right, ')')
}
t_dis_ci()
# === Chp 10 code (hypothesis test)
# Q9. sigma is known
cal_pval <- function(){
sample_avg <- as.numeric(readline(prompt="Enter Sample avg: "))
h0 <- as.numeric(readline(prompt="Enter null hypothesis: "))
sd <- as.numeric(readline(prompt="Enter standard deviation (popluation): "))
size <- as.numeric(readline(prompt="Enter sample size: "))
cat(' Sample avg :', sample_avg, '\n', 'Null hypothesis :', h0, '\n', 'Standard deviation (popluation) :'
, sd, '\n', 'Sample size :', size, '\n')
z <- (sample_avg-h0)/(sd/sqrt(size))
alpha = 0.05
z.half.alpha = qnorm(1-alpha/2)
ans <- c(-z.half.alpha, z.half.alpha)
cat('\n', 'Area', ans, '\n','Z :', z)
p = 2*pnorm(-abs(z))
cat('\n', '==== Answer ====', '\n')
cat('\n','P-value :', p)
}
# Q11.
# T distribution calculate confidence interval
t_dis_ci <- function(){
x <- as.numeric(readline(prompt="Enter sample mean: "))
sd <- as.numeric(readline(prompt="Enter sample standard deviation: "))
n <- as.numeric(readline(prompt="Enter size: "))
ci_rate <- as.numeric(readline(prompt="Enter confidential rate: "))
cat('Sample mean :', x,'\n')
cat('Sample standard deviation :', sd,'\n')
cat('Size :', n,'\n')
cat('Confidential rate :', ci_rate*100, '%','\n')
ci <- 1 - ((1 - ci_rate)/2)
error <- qt(ci,df = n-1)*sd/sqrt(n)
left <- x - error
right <- x + error
cat('\n', '==== Answer ====', '\n')
cat('Confidence interval :', '(',left, ',', right, ')')
}
cal_pval
cal_pval()
cal_pval <- function(){
sample_avg <- as.numeric(readline(prompt="Enter Sample avg: "))
h0 <- as.numeric(readline(prompt="Enter null hypothesis: "))
sd <- as.numeric(readline(prompt="Enter standard deviation (popluation): "))
size <- as.numeric(readline(prompt="Enter sample size: "))
cat(' Sample avg :', sample_avg, '\n', 'Null hypothesis :', h0, '\n', 'Standard deviation (popluation) :'
, sd, '\n', 'Sample size :', size, '\n')
z <- (sample_avg-h0)/(sd/sqrt(size))
alpha = 0.05
z.half.alpha = qnorm(1-alpha/2)
ans <- c(-z.half.alpha, z.half.alpha)
cat('\n', 'Area', ans, '\n','Z :', z, '\n')
p = 2*pnorm(-abs(z))
cat('\n', '==== Answer ====', '\n')
cat('P-value :', p)
}
cal_pval()
cal_pval_t <- function(){
sample_avg <- as.numeric(readline(prompt="Enter Sample avg: "))
h0 <- as.numeric(readline(prompt="Enter null hypothesis: "))
sd <- as.numeric(readline(prompt="Enter Sample standard deviation: "))
size <- as.numeric(readline(prompt="Enter sample size: "))
cat(' Sample avg :', sample_avg, '\n', 'Null hypothesis :', h0, '\n', 'Sample standard deviation :'
, sd, '\n', 'Sample size :', size, '\n')
z <- (sample_avg-h0)/(sd/sqrt(size))
alpha = 0.05
z.half.alpha = qnorm(1-alpha/2)
ans <- c(-z.half.alpha, z.half.alpha)
cat('\n', 'Area', ans, '\n','Z :', z)
p = 2*pnorm(-abs(z))
cat('\n','P-value :', p)
}
cal_pval_t()
al_pval_t <- function(){
sample_avg <- as.numeric(readline(prompt="Enter Sample avg: "))
h0 <- as.numeric(readline(prompt="Enter null hypothesis: "))
sd <- as.numeric(readline(prompt="Enter Sample standard deviation: "))
size <- as.numeric(readline(prompt="Enter sample size: "))
cat(' Sample avg :', sample_avg, '\n', 'Null hypothesis :', h0, '\n', 'Sample standard deviation :'
, sd, '\n', 'Sample size :', size, '\n')
z <- (sample_avg-h0)/(sd/sqrt(size))
alpha = 0.05
z.half.alpha = qnorm(1-alpha/2)
ans <- c(-z.half.alpha, z.half.alpha)
cat('\n', 'Area', ans, '\n','Z :', z)
p = 2*pnorm(-abs(z))
cat('\n', '==== Answer ====', '\n')
cat('P-value :', p)
}
cal_pval_t()
cal_pval_t <- function(){
sample_avg <- as.numeric(readline(prompt="Enter Sample avg: "))
h0 <- as.numeric(readline(prompt="Enter null hypothesis: "))
sd <- as.numeric(readline(prompt="Enter Sample standard deviation: "))
size <- as.numeric(readline(prompt="Enter sample size: "))
cat(' Sample avg :', sample_avg, '\n', 'Null hypothesis :', h0, '\n', 'Sample standard deviation :'
, sd, '\n', 'Sample size :', size, '\n')
z <- (sample_avg-h0)/(sd/sqrt(size))
alpha = 0.05
z.half.alpha = qnorm(1-alpha/2)
ans <- c(-z.half.alpha, z.half.alpha)
cat('\n', 'Area', ans, '\n','Z :', z)
p = 2*pnorm(-abs(z))
cat('\n', '==== Answer ====', '\n')
cat('P-value :', p)
}
cal_pval_t()
cal_pval_t <- function(){
sample_avg <- as.numeric(readline(prompt="Enter Sample avg: "))
h0 <- as.numeric(readline(prompt="Enter null hypothesis: "))
sd <- as.numeric(readline(prompt="Enter Sample standard deviation: "))
size <- as.numeric(readline(prompt="Enter sample size: "))
cat(' Sample avg :', sample_avg, '\n', 'Null hypothesis :', h0, '\n', 'Sample standard deviation :'
, sd, '\n', 'Sample size :', size, '\n')
z <- (sample_avg-h0)/(sd/sqrt(size))
cat('\n','t :', z)
p = 2*pnorm(-abs(z))
cat('\n', '==== Answer ====', '\n')
cat('P-value :', p)
}
cal_pval_t()
cal_pval_t <- function(){
sample_avg <- as.numeric(readline(prompt="Enter Sample avg: "))
h0 <- as.numeric(readline(prompt="Enter null hypothesis: "))
sd <- as.numeric(readline(prompt="Enter Sample standard deviation: "))
size <- as.numeric(readline(prompt="Enter sample size: "))
cat(' Sample avg :', sample_avg, '\n', 'Null hypothesis :', h0, '\n', 'Sample standard deviation :'
, sd, '\n', 'Sample size :', size, '\n')
z <- (sample_avg-h0)/(sd/sqrt(size))
cat('\n','t :', z, '\n')
p = 2*pnorm(-abs(z))
cat('\n', '==== Answer ====', '\n')
cat('P-value :', p)
}
cal_pval_t()
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
devtools::install_github('IRkernel/IRkernel')
devtools::install_github('IRkernel/IRkernel')
install.packages('Rcpp')
install.packages("Rcpp")
devtools::install_github('IRkernel/IRkernel')
remove.packages('backports')
devtools::install_github('IRkernel/IRkernel')
devtools::install_github('IRkernel/IRkernel')
devtools::install_github('IRkernel/IRkernel')
devtools::install_github('IRkernel/IRkernel')
devtools::install_github('IRkernel/IRkernel')
install.packages('backports')
devtools::install_github('IRkernel/IRkernel')
?tsum.test()\
?tsum.test()
install.packages('ASWR2')
install.packages('PASWR2')
?tsum.test()
?tsum.test
??tsum.test
tsum.test(0.98, 0.026, 77, 0.95, 0.025, 161)
install.packages('BSDA')
tsum.test(0.98, 0.026, 77, 0.95, 0.025, 161)
?BSDA
BSDA::tsum.test(0.98, 0.026, 77, 0.95, 0.025, 161)
BSDA::tsum.test(0.098, 0.026, 77, 0.095, 0.025, 161)
BSDA::tsum.test(0.098, 0.026, 77, 0.095, 0.025, 161, alternative = "two.sided", mu = 0, var.equal = TRUE)
setwd("~/TMU-GIDS/大數據統計與預測/第十一章作業")
